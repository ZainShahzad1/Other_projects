---
title: "Flights Data Analysis"
author: "FIRSTNAME LASTNAME"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r, include=FALSE}
library(tidyverse)
```


```{r}
returner <- function(x) {
  x[[length(x)]]
}
returner(1:10)
```


```{r}
even_num <- function(x) {
  x[seq(2, length(x), by = 2)]
}
even_num(1:10)
```


```{r}
except_last <- function(x) {
  x[-length(x)]
}
except_last(1:10)
```

### d)
```{r}
even_numbers <- function(x) {
  x[!is.na(x) & x %% 2 == 0]
}
even_numbers(sample(c(NA, 1:100), 99))
```


```{r}
    output <- vector("double", ncol(mtcars))
    names(output) <- names(mtcars)
    for (i in names(mtcars)) {
      output[i] <- mean(mtcars[[i]])
    }
    output
```

```{r}
    output <- vector("list", ncol(nycflights13::flights))
    names(output) <- names(nycflights13::flights)
    for (i in names(nycflights13::flights)) {
      output[[i]] <- class(nycflights13::flights[[i]])
    }
    output
```

```{r}
    data("iris")
    iris_uniq <- vector("double", ncol(iris))
    names(iris_uniq) <- names(iris)
    for (i in names(iris)) {
      iris_uniq[i] <- length(unique(iris[[i]]))
    }
    iris_uniq
```

```{r}

    n <- 10
    mu <- c(-10, 0, 10, 100)
    normals <- vector("list", length(mu))
    for (i in seq_along(normals)) {
      normals[[i]] <- rnorm(n, mean = mu[i])
    }
    normals
```

```{r}
looper <- function(the_type, object, fun) {
  empty_vec = vector(the_type, length(object))
  for (every_column in seq_along(object)) {
    empty_vec[every_column] <- fun(object[[every_column]])  
  }
  
  empty_vec
}
looper("numeric", mtcars, mean)

```


```{r}
library(nycflights13)

looper("character", flights, class)

```


```{r}
looper("numeric", iris, function(x) sum(table(unique(x))))

```


```{r}
ten_draws <- function(x) rnorm(10, mean = x)
map(c(-10, 0, 10, 100), ten_draws)
```


```{r}
set.seed(2131)
create_random <- function() {
  tibble(
    x = rep(1:10, each = 3),
    y = x * 1.5 + 6 + rt(length(x), df = 2)
  )
}
setNames(1:6, paste0("dt", 1:4)) %>% 
  map(~ create_random()) %>%
  enframe() %>% 
  unnest() %>% 
  ggplot(aes(x, y)) +
  geom_point() +
  geom_smooth(method = "lm", colour = "black", se = FALSE) +
  facet_wrap(~ name, scales = "free_y")
```
The slope changes depending on the outliers. A better approach could be to used something like a root median squared error.


```{r}
model1 <- function(a, data) {
  a[1] + data$x * a[2]
}
measure_distance <- function(mod, data) {
  diff <- data$y - model1(mod, data)
  mean(abs(diff))
}
```
