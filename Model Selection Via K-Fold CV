---
title: "Model Selection Via K-Fold CV"
author: "Zain Shahzad"
date:  "`r format(Sys.time(), '%B %d, %Y')`"
output: html_document
---


```{r setup, include=F}
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
```

#Introduction

Below is a preview of a dataset containing close to a full year of daily observed maximum air and maximum water temperatures for 31 different rivers in Spain. The variable `D` represents the Julian day and takes values from *1* to *365*. The variable `L` identifies 31 different measurement station locations. Variables `W` and `A` are the maximum water and air temperatures, respectively. Finally, the variable named `T` for time maintains the order of the data according to when it was observed.  For the sake of our sanity, all days missing important information have been removed using `na.omit()`.

```{r,message=F}
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
```


##Part 1: Cross-Validated RMSE for Each Choice of $I$ and $J$



 


```{r,eval=T}
set.seed(216) #DO NOT CHANGE

DATA2 = na.omit(DATA) %>% crossv_kfold(10)

head(DATA2) #DO NOT CHANGE
```


```{r,eval=T}
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE

RMSE.func=function(actual,predict){
  mse=mean((actual-predict)^2,na.rm=T)
  rmse=sqrt(mse)
  return(rmse)
}

RMSE.func(actual=x,predict=y) #DO NOT CHANGE
```


```{r}
train.model.func=function(data,I,J){
  mod=lm(W~poly(A,I)+poly(D,J),data=data)
  return(mod)
}
```


```{r,eval=T}
OUT.RMSE=matrix(NA,7,7) #DO NOT CHANGE

for(i in 1:7) {
  for(j in 1:7) {
    DATA3 = DATA2 %>% mutate(tr.model=map(train, train.model.func,i,j))
    DATA4 = DATA3 %>% mutate(predict=map2(test, tr.model, ~augment(.y,newdata = .x))) %>% select(predict) %>% unnest()
    OUT.RMSE[i,j] = RMSE.func(DATA4$W, DATA4$.fitted)
  }
}

print(OUT.RMSE) #DO NOT CHANGE
```


##Part 2: Comparing Top 5 Models



```{r, eval=T}
OUT.RMSE2=as.tibble(OUT.RMSE) %>% 
  mutate(I=1:7) %>% 
  rename(`1`=V1,`2`=V2,`3`=V3,`4`=V4,`5`=V5,`6`=V6,`7`=V7) %>%
  select(I,everything()) %>%
  gather(`1`:`7`,key="J",value="RMSE",convert=T) %>%
  mutate(I=as.factor(I),J=as.factor(J))
head(OUT.RMSE2)
```


```{r,eval=T}
BEST5.RMSE=as.tibble(OUT.RMSE2) %>%
  filter(RMSE <=2.691524)

head(BEST5.RMSE) #DO NOT CHANGE
```


```{r,eval=T}
ggplot(DATA) +
  geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
  theme_minimal() +
  xlab("Julian Day")+
  ylab("Max Water Temperature")
```


```{r,eval=T}
BEST5.DATA=DATA %>%
            mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
                   Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
                   Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
                   Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
                   Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
```


```{r,eval=T}
BEST5.DATA2 = as.tibble(BEST5.DATA) %>%
  gather(key = "Model", value = "prediction",
         First, Second, Third, Fourth, Fifth, factor_key = T)

head(BEST5.DATA2) #DO NOT CHANGE
```


```{r,eval=T}
ggplot(BEST5.DATA2) +
  geom_point(aes(x=D,y=W, color=as.factor(Model)), size=2, alpha=.05, stroke=0) +
  geom_line(aes(x=D,y=prediction), linetype="dashed", size=1.25) +
  theme_minimal() +
  facet_grid(as.factor(Model)~.) +
  guides(color=FALSE) +
  xlab("Julian Day") +
  ylab("Max Water Temperature")
```

They do not vary heavily in the top 5 models. This was expected though, since a similar practice was done in Modeling tutorial 9  and there was also not much variation among the models.


```{r,fig.width=8,fig.height=4,fig.show='hold',fig.align='center',echo=F,eval=T}
OUT.RMSE2 %>% 
  group_by(I) %>% 
  summarize(avgRMSE=mean(RMSE))%>%
  ungroup() %>%
    ggplot() +
    geom_point(aes(x=I,y=avgRMSE))+
    geom_line(aes(x=I,y=avgRMSE,group=1)) +
    theme_minimal()

OUT.RMSE2 %>% 
  group_by(J) %>% 
  summarize(avgRMSE=mean(RMSE))%>%
  ungroup() %>%
    ggplot() +
    geom_point(aes(x=J,y=avgRMSE))+
    geom_line(aes(x=J,y=avgRMSE,group=1)) +
    theme_minimal()
```

I would recommend 4 for I and 7 for J because they are the two points on their respective graphs that represent the lowest avgRMSE. The first figure says that the lowest avgRMSE for I is in the middle and the extremes of 1 and 7 tend to go up in avgRMSE, while in J the graph has a sort of square root function and keeps getting smaller as the values for J increase, but at a slower and slower rate.


##Part 3: Plots of Best Model

```{r,eval=T}
BEST.func=function(data){
  data[which.min(data$RMSE),] %>% select(I,J)
}

BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
```


```{r,eval=T}
BEST.DATA = train.model.func(DATA, 3,6)
DATA$mwt.hat=predict(BEST.DATA,newx=as.matrix(X))

ggplot(DATA) +
  geom_point(aes(x=W,y=mwt.hat),color="lightskyblue") +
  geom_abline(a=0,b=1,linetype="dashed", color = "red") +
  theme_minimal() +
  ylab("Fitted Max Water Temperature") +
  xlab("Actual Max Water Temperature")
```


```{r,eval=T}
res = residuals(BEST.DATA,newx=as.matrix(X))
ggplot(DATA) +
  geom_point(aes(x=D,y=res), color="green") +
  geom_hline(yintercept=0, color = "red") +
  theme_minimal() +
  xlab("Day") +
  ylab("Residual")
```
